/////////////////Messages used with ZMQ /////////////////////////////
transmitter_registration_request:
This message is used by a PylonGPS transmitter to submit any required credentials and give the required metadata for the stream to the caster (lat/long, expected update rate, basestation tech, message protocol).  The caster should reply with a transmitter_registration_reply.

transmitter_registration_reply:
This message used used by a caster to reply to a transmitter_registration_request.  It indicates if the registration succeeded and if not, then why it failed.

client_query_request:
This message is used by a PylonGPS client to request a list of available sources from a caster.  It allows filtering based on lat/long (entries within a certain distance of a point, sorted by distance or in a grid), limiting the number of entries returned to a certain number, uptime (> certain amount), update rate (> certain amount), expected update rate (> certain amount), base station technology (in a list of different types) and protocol (in a list of different types).

Alternatively, the request can be formatted to ask the caster for information about itself, such as version.

client_query_reply:
This message contains either an error message indicating the request was invalid, a list (sometimes sorted) of base station information structures or a message containing the details about the caster.

stream_status_update:
This message is published by a caster to inform proxies or interested clients if a stream has been added or has been removed from the caster's list of information sources.  This allows clients and proxies to be aware of when their subscribed source disconnects and allow for waiting until a source comes online.  The registrations notifications include a  base_station_stream_information message with all of the details associated with the new source.

submessages:
base_station_stream_information:
This message contains all of the details related to a basestation stream (including public key/organization, if there is one and lat/long, expected update rate, basestation tech and message protocol).

caster_information:
This message contains all the details regarding a pylonGPS caster instance, including version.

base_station_radius_sub_request:
A message used in client_query_request messages to define a request for base stations that are within a given radius from a lattitude/longitude.

client_subquery:
A collection of conditions on what basestations are considered acceptable "ANDed" together.

sql_double_condition:
A condition on a double field: "<,<=, ==, >, =>" value 

sql_integer_condition:
A condition on a integer field: "<,<=, ==, >, =>" value

sql_string_condition:
A condition on a string field: "==, LIKE" value

database_request:
This message is used to request an operation on the database be completed.  So far this includes adding or removing a base station entry or updating the reported update rate.

database_reply:
This message is sent in response to a database request and indicates the success or failure of the request.

Enums are defined in a shared .proto file for inclusion.

Credentials:

Credentials are suppose to grant the owner of a certain public key some rights in the system.  In this case, it is suppose to allow official or registered GPS base station owning organizations to assure ownership to a given stream.  This is done by passing a credentials message along with a registration to prove that the stream being used to provide updates is using a key that was authorized by one or more known organizations.  Currently credentials are set to have limited lifetimes and blacklist capability is expected to be added at some point in the future.

Credential messages are implemented as follows:
A credentials message contains a serialized authorized_permissions message which contains fields defining what the key owner is allowed to do and what key the permissions are for.  It also contains one or more signature messages.  The signature messages contain a signed hash of the serialized authorized_permissions field and the key of the signer.  This allows for an arbitrary number of key holders (organizations or individuals) to attest that the authorized_permissions are upheld by their authority.

/////////////////Messages used with event queue /////////////////////////////

event_message:
This message contains no fields but has a large extension option range so that any new "event" messages can add its definition to it as an optional or repeated message member.  It is meant to be used with a std::tuple<std::chrono::timepoint, event_message> to allow easy construction of an event queue.  Which messages the event_message has embedded can be checked with the has_ member functions.

possible_metadata_timeout_event:


