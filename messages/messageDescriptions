/////////////////Messages used with ZMQ /////////////////////////////

ntrip_server_metadata_addition_request:
This message is used by a corrections server to register its metadata with the server in anticipate of making a NTRIP request to start streaming data.

ntrip_server_metadata_addition_reply:
This message indicates if the metadata request was successful and if not, why not.  It also returns a password string which can be used to connect using NTRIP to provide the information stream.  The server's entry will only appear in the source table once the NTRIP connection has been made.

ntrip_server_registration_or_deregistraton_request:
This message is used by a thread associated with the TCP connection to a NTRIP server.  It is sent to the stream manager object to either try to register the new correction stream or notify the manager that the connection was closed and the entry should be removed.  Since the NTRIP 1.0 standard doesn't support automatic metadata registration, the request is expected to have the password that was provided when the metadata was originally registered.

ntrip_server_registration_or_deregistraton_reply:
This message is sent by the stream manager object in response to a ntrip_server_registration_or_deregistraton_request.  It tells the sender if the mountpoint registration/deregistration was successful and gives any other details that may later be nessisary.

ntrip_source_table_request:
This message is sent by a thread associated with the TCP connection to a NTRIP client.  It can have a mountpoint and optionally some restrictions on what results are returned (defined by the accepts http field?).  If the mountpoint is empty, a sourcetable is expected in the response.  Otherwise, the inproc address associated with the mountpoint's information stream is expected.

ntrip_source_table_reply:
This message is sent by the stream manager object in response to a ntrip_source_table_request.  It contains either the full source table, a filtered subset of the source table or the inproc address associated with a given mountpoint's information stream.

/////////////////Messages used with event queue /////////////////////////////

event_message:
This message contains no fields but has a large extension option range so that any new "event" messages can add its definition to it as an optional or repeated message member.  It is meant to be used with a std::tuple<std::chrono::timepoint, event_message> to allow easy construction of an event queue.  Which messages the event_message has embedded can be checked with the has_ member functions.

possible_metadata_timeout_event:


