#include "casterGUI.hpp"

using namespace pylongps;

/**
This function initializes the class, connecting widgets, setting up the form generated by Qt designer and adding the components that the designer doesn't handle well.

@throw: This function can throw exceptions
*/
casterGUI::casterGUI()
{
setupUi(this);
casterConfigurationStackedWidget->setCurrentIndex(0);

//Setup page control buttons
connect(configurationPushButton, SIGNAL(clicked(bool)), this, SLOT(switchToConfigureCasterPage()));
connect(createCredentialsPushButton, SIGNAL(clicked(bool)), this, SLOT(switchToCreateCredentialsPage()));
connect(addRemoveKeysPushButton, SIGNAL(clicked(bool)), this, SLOT(switchToAddRemoveKeysPage()));

//Add key generation button functionality
connect(generateKeysPushButton, SIGNAL(clicked(bool)), this, SLOT(selectDirectoryForKeyPairGeneration()));
connect(this, SIGNAL(keyPairGenerationFolderSelected(std::string)), this, SLOT(generateKeyPairFiles(std::string)));

//Add validators to line edits
casterIDLineEdit->setValidator(new QIntValidator(0, INT_MAX, this));

int portNumberMax = 65535;
dataSenderPortNumberLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );
clientRequestPortNumberLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );
clientStreamPublishingPortNumberLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );
proxyStreamPublishingPortNumberLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );
streamStatusNotificationPortNumberLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );
keyManagementPortNumberLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );
casterPortLineEdit->setValidator( new QIntValidator(0, portNumberMax, this) );

selectCredentialsBasestationLimit->setValidator( new QIntValidator(0, INT_MAX, this) );

printf("Public: %d\n", crypto_sign_PUBLICKEYBYTES);
printf("Secret: %d\n", crypto_sign_SECRETKEYBYTES);

printf("Public Z85: %d\n", z85PublicKeySize);
printf("Secret Z85: %d\n", z85SecretKeySize);


} 


/**
This function switches the main GUI's stacked widget to the configureCasterPage.
*/
void casterGUI::switchToConfigureCasterPage()
{
casterConfigurationStackedWidget->setCurrentIndex(0);
}

/**
This function switches the main GUI's stacked widget to the createCredentialsPage.
*/
void casterGUI::switchToCreateCredentialsPage()
{
casterConfigurationStackedWidget->setCurrentIndex(1);
}

/**
This function switches the main GUI's stacked widget to the addRemoveKeysPage.
*/
void casterGUI::switchToAddRemoveKeysPage()
{
casterConfigurationStackedWidget->setCurrentIndex(2);
}

/**
This function opens a file dialog menu to select the base path to generate key pair and emits keyPairGenerationFolderSelected with the selected base path.
*/
void casterGUI::selectDirectoryForKeyPairGeneration()
{
QString qfileName = QFileDialog::getSaveFileName(this, "Save File", QString(pathToFolderToPlaceGeneratedKeyPairIn.c_str()), "");
std::string fileName = qfileName.toStdString();

if(fileName.size() > 0)
{
pathToFolderToPlaceGeneratedKeyPairIn = fileName;
emit keyPairGenerationFolderSelected(fileName);
}
}

/**
This function generates a new signing key pair and outputs it to files with the .pylonPublicKey and .pylonPrivateKey extensions in Z85 text format (ZMQ standard).
@param inputBasePath: The base file name to add the extensions to/write

@throw: This function can throw exceptions
*/
void casterGUI::generateKeyPairFiles(const std::string &inputBasePath)
{
//Generate signing key pair
std::string binaryPublicKey;
std::string binarySecretKey;

std::tie(binaryPublicKey, binarySecretKey) = generateSigningKeys();

//Convert to Z85 format
std::string z85PublicKey;
std::string z85SecretKey;

SOM_TRY
z85PublicKey = convertStringToZ85Format(binaryPublicKey);
SOM_CATCH("Error unable to convert to z85 format\n") 

SOM_TRY
z85SecretKey = convertStringToZ85Format(binarySecretKey);
SOM_CATCH("Error unable to convert to z85 format\n") 

if(!saveStringToFile(z85PublicKey.substr(0, z85PublicKey.size()-1), inputBasePath+".pylonPublicKey"))
{
emit couldNotWriteKeyPairFiles();
return;
}

if(!saveStringToFile(z85SecretKey.substr(0, z85SecretKey.size()-1), inputBasePath+".pylonSecretKey"))
{
emit couldNotWriteKeyPairFiles();
return;
}
}


