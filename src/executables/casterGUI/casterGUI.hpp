#pragma once

#include<QMainWindow>
#include "ui_casterConfigurationWindowTemplate.h"
#include<QPushButton>
#include<QStackedWidget>
#include<QFileDialog>
#include<sodium.h>
#include "zmq.hpp"
#include "SOMException.hpp"
#include "utilityFunctions.hpp"

#include<climits>
#include<string>
#include<memory>


namespace pylongps
{


/**
This class is the main window used with the pylon GPS 2.0 tranceiver.  It is written to use Qt4 with the Marble GIS library because that is what is currently available in the Ubuntu repositories.
*/
class casterGUI : public QMainWindow, public Ui::casterConfigurationWindowTemplate
{
Q_OBJECT

public:

/**
This function initializes the class, connecting widgets, setting up the form generated by Qt designer and adding the components that the designer doesn't handle well.

@throw: This function can throw exceptions
*/
casterGUI();

public slots:
/**
This function switches the main GUI's stacked widget to the configureCasterPage.
*/
void switchToConfigureCasterPage();

/**
This function switches the main GUI's stacked widget to the createCredentialsPage.
*/
void switchToCreateCredentialsPage();

/**
This function switches the main GUI's stacked widget to the addRemoveKeysPage.
*/
void switchToAddRemoveKeysPage();

/**
This function opens a file dialog menu to select the base path to generate key pair and emits keyPairGenerationFolderSelected with the selected base path.
*/
void selectDirectoryForKeyPairGeneration();

/**
This function generates a new signing key pair and outputs it to files with the .pylonPublicKey and .pylonPrivateKey extensions in Z85 text format (ZMQ standard).
@param inputBasePath: The base file name to add the extensions to/write

@throw: This function can throw exceptions
*/
void generateKeyPairFiles(const std::string &inputBasePath);


signals:
void keyPairGenerationFolderSelected(std::string);

void couldNotWriteKeyPairFiles();

void couldNotReadPublicKeyFile();

void couldNotReadSecretKeyFile();

protected:
//Caster configuration page variables
std::string casterConfigurationPublicSigningKey;
std::string casterConfigurationPrivateSigningKey;
std::string casterConfigurationKeyManagementPublicSigningKey;

//Generate key pair variables
std::string pathToFolderToPlaceGeneratedKeyPairIn;


};















}
